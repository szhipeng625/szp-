// 对于每个子矩阵都有一个贡献值，然后对于每一个单元格，我们通过枚举会发现其中的规律，然后我们推出公式，就解决这题+

#include <bits/stdc++.h>

using u32 = unsigned;
using i64 = long long;
using u64 = unsigned long long;

void solve() {
    int n, m, k;
    std::cin >> n >> m >> k;
    
    int w;
    std::cin >> w;
    
    std::vector<int> a(w);
    for (int i = 0; i < w; i++) {
        std::cin >> a[i];
    }
    
    std::vector<i64> f;
    f.reserve(n * m);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            i64 res = 1LL * (std::min(i, n - k) - std::max(0, i - k + 1) + 1) * (std::min(j, m - k) - std::max(0, j - k + 1) + 1);
            f.push_back(res);
        }
    }
    
    i64 ans = 0;
    std::sort(f.begin(), f.end(), std::greater());
    std::sort(a.begin(), a.end(), std::greater());
    for (int i = 0; i < w; i++) {
        ans += a[i] * f[i];
    }
    std::cout << ans << "\n";
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    
    int t;
    std::cin >> t;
    
    while (t--) {
        solve();
    }
    
    return 0;
}
