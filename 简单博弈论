// 简单的博弈论，我们只需要关注Alice赢得情况，其余的情况就是Bob赢
// 我们只要Bob做出和Alice相同的动作，那么最后剩下的一定是相同的，反之Alice一定会有办法胜利
// 所以问题就转化为，Bob是否能和做出Alice相同的动作，Alice只有两种操作，所以只需要保证删除Bob存在的数字就一定会赢
// 最终推出，枚举每一次操作的数字，Bob如果不包含就Alice win
// 我们需要维护，每次Bob删除的数字之后剩下的两个数, 顺序枚举和倒叙枚举各一次就包含了全部情况
// 我们删除左端的数和右端的数字是不会影响b数组的的情况，因为A1和An互不相同，B1和Bn要删除的数字与A保持一直，所以改变顺序不会影响他的本质。
// 假设是Alice会赢得情况
// 要么是顺序的，要么是反转的，然后我们就可以根据性质证出来
// 假设删除第一个时，A对应位置在n那么bn的位置一定在1的位置。
// 假设鲍勃会赢，的情况。
#include <bits/stdc++.h>

using namespace std;

void solve() {
    int n;
    cin >> n;
    vector<int> a(n + 1);
    vector<int> b(n + 1);
    for(int i = 1; i <= n; i ++)    cin >> a[i];
    for(int i = 1; i <= n; i ++)    cin >> b[i];
    if (a == b || a == vector(b.rbegin(), b.rend())) {
        std::cout << "Bob\n";
    } else {
        std::cout << "Alice\n";
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    int n;
    cin >> n;
    for(int i = 0; i < n; i ++)
        solve();
    return 0;
}
