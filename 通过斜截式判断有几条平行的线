// 通过斜截式，我们可以确定斜率，然后通过b的数量，即可确定出直线的数量
// 先求出斜率k，然后通过转化为整数，然后再求出b的个数

#include<bits/stdc++.h>
using namespace std;
#define int long long
const int inf = 1e18;
const int N = 1e7 + 10;
const int mod = 1000000007;
 
void solve()
{
    int n, k;
    cin >> n >> k;
 
    vector<pair<int, int>>p(n + 1);
 
    for (int i = 1; i <= n; i++)
        cin >> p[i].first >> p[i].second;
 
    int x1 = p[1].first, y1 = p[1].second;
    int x2, y2;
 
    for (int i = 2; i <= n; i++)
    {
        x2 = p[i].first, y2 = p[i].second;
        
        int dx = x2 - x1;
        int dy = y2 - y1;
 
        map<int, vector<int>>q;
      
        for (int j = 1; j <= n; j++)
        {
            int x3 = p[j].first, y3 = p[j].second;
            //y=kx-b ydx=dyx-bdx 分数转化为整数
            int b = dx * y3 - dy * x3;
            q[b].push_back(j);
 
            if (q.size() > k)//剪枝！！！不加会t
                break;
        }
 
        if (q.size() == k)
        {
            int f = 1;
            for (auto x : q)
            {
                if (x.second.size() == 1)
                {
                    f = 0; break;
               }
            }
 
            if (f)
            {
                for (auto x : q)
                {
                    cout << x.second.size()<<" ";
                    for (auto xx : x.second)
                        cout << xx << " ";
                    cout << endl;
                }
                return;
            }
        }
    }
}
 
signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);
    int T = 1;
    //cin >> T;
    while (T--)
    {
        solve();
        // cout << endl;
    }
    return 0;
}
