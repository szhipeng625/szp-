// 单调栈， 根据题目意思，满足一定单调性，并找出最小的点，我们固定一的点，另一个点会满足某种性质，我们只需要维护其性质即可，因为另一个元素是单调递减的，当新加入的元素大于栈顶时，他前面可能会有一个数小于他，除了栈顶的元素，所以都可以
// 通过它联通，所以需要弹出和他联通的所有块。就是剩下的块。
#include <bits/stdc++.h>

using u32 = unsigned;
using i64 = long long;
using u64 = unsigned long long;

using namespace std;

void solve() {
    int n;
    cin >> n;
    vector<pair<int, int>> a(n);
    for(int i = 0; i < n; i ++){
        int x, y;
        cin >> x >> y;
        a[i].first = x - i;
        a[i].second = i - y;
    } 
    sort(a.begin(), a.end());
    stack<pair<int, int>> s;
    s.push(a[0]);
    for(int i = 1; i < n; i ++){
        if(s.size() && (s.top().second <= a[i].second)){
            auto t = s.top();
            s.pop();
            while(s.size() && (s.top().second <= a[i].second)){
                s.pop();
            }
            s.push(t);
        }else
            s.push(a[i]);

    }
    cout << s.size() << endl;

}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    
    // i64 t;
    // std::cin >> t;
    
    // while (t--) {
        solve();
    // }
    
    return 0;
}
