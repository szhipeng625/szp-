//数位dp，模板
#include<bits/stdc++.h>

using namespace std;

using i64 = long long;

void solve() {
    i64 n, x;
    cin >> n >> x;
    i64 sum = 0;
    vector<vector<i64>> dp(20, vector<i64>(10));
    dp[0][0] = 1;

    for (int i = 1; i < 20; i++) {
        for (int j = 0; j <= 9; j++) {
            if (j == x) {
                dp[i][j] = 0;
            } else {
                for (int k = 0; k <= 9; k++) {
                    dp[i][j] += dp[i - 1][k];
                }
            }
        }
    }

    vector<int> num(20);
    int cnt = 0;

    while (n) {
        num[++cnt] = n % 10;
        n /= 10;
    }

    i64 res = 0;
    bool flag = false; 

    for (int i = cnt; i >= 1; i--) {
        for (int j = 0; j < num[i]; j++) {
            if (j == x) continue;
            res += dp[i][j];
        }
        if (num[i] == x) {
            flag = true;
            break;
        }
    }

    if (!flag) {
        res += 1;  
    }

    cout << res << endl;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    int n;
    cin >> n;

    for (int i = 0; i < n; i++) {
        solve();
    }
    return 0;
}
