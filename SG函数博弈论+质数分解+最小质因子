// 博弈论， 当x为偶数的时候，sg函数为0， 当x为奇数的时候，就等于他的最小素因子的sg函数
// 我们设当前的数为x，看他可以变成那些数，从前往后枚举查看，我们会发现，当他到达他的最小素因子时，他就会停下，sg函数就等于它的最小质因子。

#include <bits/stdc++.h>

using u32 = unsigned;
using i64 = long long;
using u64 = unsigned long long;

constexpr int N = 1E7;

int sg[N + 1];
std::vector<int> minp, primes;

void sieve(int n) {
    minp.assign(n + 1, 0);
    primes.clear();
    
    for (int i = 2; i <= n; i++) {
        if (minp[i] == 0) {
            minp[i] = i;
            primes.push_back(i);
        }
        
        for (auto p : primes) {
            if (i * p > n) {
                break;
            }
            minp[i * p] = p;
            if (p == minp[i]) {
                break;
            }
        }
    }
}

void solve() {
    int n;
    std::cin >> n;
    
    int ans = 0;
    for (int i = 0; i < n; i++) {
        int a;
        std::cin >> a;
        ans ^= sg[a];
    }
    
    if (ans != 0) {
        std::cout << "Alice\n";
    } else {
        std::cout << "Bob\n";
    }
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    
    sieve(N);
    sg[0] = 0;
    sg[1] = 1;
    sg[2] = 0;
    for (int i = 1; i < primes.size(); i++) {
        sg[primes[i]] = i + 1;
    }
    for (int i = 3; i <= N; i++) {
        sg[i] = sg[minp[i]];
    }
    
    int t;
    std::cin >> t;
    
    while (t--) {
        solve();
    }
    
    return 0;
}+
